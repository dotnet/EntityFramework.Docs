// <auto-generated />
using EFModeling.DataSeeding;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFModeling.DataSeeding.Migrations
{
    [DbContext(typeof(ManagingDataContext))]
    [Migration("20241016041555_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFModeling.DataSeeding.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocatedInId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocatedInId");

                    b.ToTable("Cites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocatedInId = 1,
                            Name = "Seattle"
                        },
                        new
                        {
                            Id = 2,
                            LocatedInId = 2,
                            Name = "Vancouver"
                        },
                        new
                        {
                            Id = 3,
                            LocatedInId = 3,
                            Name = "Mexico City"
                        },
                        new
                        {
                            Id = 4,
                            LocatedInId = 3,
                            Name = "Puebla"
                        });
                });

            modelBuilder.Entity("EFModeling.DataSeeding.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "USA"
                        },
                        new
                        {
                            CountryId = 2,
                            Name = "Canada"
                        },
                        new
                        {
                            CountryId = 3,
                            Name = "Mexico"
                        });
                });

            modelBuilder.Entity("EFModeling.DataSeeding.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "French"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Spanish"
                        });
                });

            modelBuilder.Entity("LanguageCountry", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("LanguageId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("LanguageCountry");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            CountryId = 2
                        },
                        new
                        {
                            LanguageId = 2,
                            CountryId = 2
                        },
                        new
                        {
                            LanguageId = 3,
                            CountryId = 3
                        });
                });

            modelBuilder.Entity("EFModeling.DataSeeding.City", b =>
                {
                    b.HasOne("EFModeling.DataSeeding.Country", "LocatedIn")
                        .WithMany()
                        .HasForeignKey("LocatedInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocatedIn");
                });

            modelBuilder.Entity("EFModeling.DataSeeding.Language", b =>
                {
                    b.OwnsOne("EFModeling.DataSeeding.LanguageDetails", "Details", b1 =>
                        {
                            b1.Property<int>("LanguageId")
                                .HasColumnType("int");

                            b1.Property<int>("PhonemesCount")
                                .HasColumnType("int");

                            b1.Property<bool>("Phonetic")
                                .HasColumnType("bit");

                            b1.Property<bool>("Tonal")
                                .HasColumnType("bit");

                            b1.HasKey("LanguageId");

                            b1.ToTable("Languages");

                            b1.WithOwner()
                                .HasForeignKey("LanguageId");

                            b1.HasData(
                                new
                                {
                                    LanguageId = 1,
                                    PhonemesCount = 44,
                                    Phonetic = false,
                                    Tonal = false
                                },
                                new
                                {
                                    LanguageId = 2,
                                    PhonemesCount = 36,
                                    Phonetic = false,
                                    Tonal = false
                                },
                                new
                                {
                                    LanguageId = 3,
                                    PhonemesCount = 24,
                                    Phonetic = true,
                                    Tonal = false
                                });
                        });

                    b.Navigation("Details");
                });

            modelBuilder.Entity("LanguageCountry", b =>
                {
                    b.HasOne("EFModeling.DataSeeding.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFModeling.DataSeeding.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
